services:
  postgres:
    container_name: ally360-postgres
    image: postgres:15
    restart: unless-stopped
    ports:
      - "5432:5432"
    volumes:
      - ./postgres/postgres-data:/var/lib/postgresql/data
      # - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro  # para inicializar la base de datos
      # - ./postgres/custom.conf:/etc/postgresql/postgresql.conf      # para configuraciones personalizadas
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    container_name: ally360-redis
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    container_name: ally360-minio
    image: minio/minio:latest
    restart: unless-stopped
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio-data:/data
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY:-minioadmin}
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  api:
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    container_name: ally360-api
    image: ally360-api
    build:
      context: ./
      dockerfile: docker/debugger.Dockerfile
    ports:
      - "8000:8000"
      - "5678:5678"
    volumes:
      - ./app:/code/app
    tty: true
    env_file:
      - .env
    environment:
      - DEBUG="true"
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
      - MINIO_HOST=minio
      - MINIO_PUBLIC_HOST=localhost
      - MINIO_PUBLIC_PORT=9000

  celery-worker:
    depends_on:
      - api
      - redis
    container_name: ally360-celery-worker
    image: ally360-api
    command: celery -A app.core.celery worker --loglevel=info -Q email,files,products,celery
    volumes:
      - ./app:/code/app
    env_file:
      - .env
    environment:
      - DEBUG="true"
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
      - MINIO_HOST=minio
      - MINIO_PUBLIC_HOST=localhost
      - MINIO_PUBLIC_PORT=9000

  celery-beat:
    depends_on:
      - api
      - redis
    container_name: ally360-celery-beat
    image: ally360-api
    command: celery -A app.core.celery beat --loglevel=info
    volumes:
      - ./app:/code/app
    env_file:
      - .env
    environment:
      - DEBUG="true"
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
      - MINIO_HOST=minio
      - MINIO_PUBLIC_HOST=localhost
      - MINIO_PUBLIC_PORT=9000

volumes:
  redis-data:
  minio-data: